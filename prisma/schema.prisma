generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Invitation {
  id           Int            @id @default(autoincrement())
  inviterId    String
  inviteeId    String         @unique
  createdAt    DateTime       @default(now())
  subscription Subscription[]

  inviter User @relation("Inviter", fields: [inviterId], references: [id])
  invitee User @relation("Invitee", fields: [inviteeId], references: [id])
}

model User {
  id                  String            @id @default(cuid())
  supabaseId          String            @unique
  username            String?
  openid              String?           @unique
  password            String
  email               String?           @unique
  emailVerified       DateTime?
  phone               String?           @unique
  avatar              String?
  inviteCode          String            @unique @default(cuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  coins               Int               @default(0)
  level               Int               @default(1)
  country             String?
  province            String?
  sex                 Int?
  language            String?
  unionid             String?
  city                String?
  privilege           String[]
  subscription        Subscription[]
  sessions            Session[]
  role                Role
  CoinTransaction     CoinTransaction[]
  Order               Order[]
  invitationsSent     Invitation[]      @relation("Inviter")
  invitationsReceived Invitation[]      @relation("Invitee")
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Order {
  id               String           @id @default(cuid())
  userId           String
  amount           Float
  payerOpenid      String?
  currency         String?
  status           OrderStatus
  subscriptionType SubscriptionType
  paymentId        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id])

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int?
}

model Subscription {
  id        Int              @id @default(autoincrement())
  type      SubscriptionType
  startDate DateTime         @default(now())
  endDate   DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  orders Order[]

  invitationId Int?
  invitation   Invitation? @relation(fields: [invitationId], references: [id])
}

enum OrderStatus {
  CREATED
  PAID
  CANCELED
}

model MembershipLevel {
  id             Int      @id @default(autoincrement())
  level          Int      @unique @default(0)
  rechargeAmount Int
  createdAt      DateTime @default(now())
}

model SubscriptionPrice {
  id       Int              @id @default(autoincrement())
  title    String
  subtitle String
  price    Int
  type     SubscriptionType @unique
  tag      String?
}

model CoinTransaction {
  id          Int      @id @default(autoincrement())
  userId      String
  amount      Int // 交易金额
  description String // 交易描述，例如充值、消费等
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum SubscriptionType {
  YEARLY
  MONTHLY
  QUARTERLY
  SEMIANNUALLY
  INVITE
}

enum Role {
  ADMIN
  USER
}

enum WechatLoginStatus {
  CREATED
  SUCCESS
  FAIL
  USED
}

model WechatLoginSession {
  id        String            @id @default(uuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String?
  status    WechatLoginStatus
}
